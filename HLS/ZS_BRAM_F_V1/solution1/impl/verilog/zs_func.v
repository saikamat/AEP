// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="zs_func,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.387000,HLS_SYN_LAT=26918,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=301,HLS_SYN_LUT=663}" *)

module zs_func (
        ap_clk,
        ap_rst_n,
        ImgIn_Addr_A,
        ImgIn_EN_A,
        ImgIn_WEN_A,
        ImgIn_Din_A,
        ImgIn_Dout_A,
        ImgIn_Clk_A,
        ImgIn_Rst_A,
        ImgOut_Addr_A,
        ImgOut_EN_A,
        ImgOut_WEN_A,
        ImgOut_Din_A,
        ImgOut_Dout_A,
        ImgOut_Clk_A,
        ImgOut_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 16'b1;
parameter    ap_ST_st2_fsm_1 = 16'b10;
parameter    ap_ST_st3_fsm_2 = 16'b100;
parameter    ap_ST_st4_fsm_3 = 16'b1000;
parameter    ap_ST_st5_fsm_4 = 16'b10000;
parameter    ap_ST_st6_fsm_5 = 16'b100000;
parameter    ap_ST_st7_fsm_6 = 16'b1000000;
parameter    ap_ST_st8_fsm_7 = 16'b10000000;
parameter    ap_ST_st9_fsm_8 = 16'b100000000;
parameter    ap_ST_st10_fsm_9 = 16'b1000000000;
parameter    ap_ST_st11_fsm_10 = 16'b10000000000;
parameter    ap_ST_st12_fsm_11 = 16'b100000000000;
parameter    ap_ST_st13_fsm_12 = 16'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 16'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 16'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv6_2A = 6'b101010;
parameter    ap_const_lv13_32 = 13'b110010;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv7_4D = 7'b1001101;
parameter    ap_const_lv7_4E = 7'b1001110;
parameter    ap_const_lv7_4F = 7'b1001111;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_const_lv32_FF = 32'b11111111;
parameter    ap_const_lv7_31 = 7'b110001;
parameter    ap_const_lv7_32 = 7'b110010;
parameter    ap_const_lv7_33 = 7'b110011;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv12_32 = 12'b110010;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] ImgIn_Addr_A;
output   ImgIn_EN_A;
output  [3:0] ImgIn_WEN_A;
output  [31:0] ImgIn_Din_A;
input  [31:0] ImgIn_Dout_A;
output   ImgIn_Clk_A;
output   ImgIn_Rst_A;
output  [31:0] ImgOut_Addr_A;
output   ImgOut_EN_A;
output  [3:0] ImgOut_WEN_A;
output  [31:0] ImgOut_Din_A;
input  [31:0] ImgOut_Dout_A;
output   ImgOut_Clk_A;
output   ImgOut_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg ImgIn_EN_A;
reg[3:0] ImgIn_WEN_A;
reg ImgOut_EN_A;
reg[3:0] ImgOut_WEN_A;
reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm = 16'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_34;
reg    ap_ready;
wire   [31:0] ap_return;
wire    zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce;
wire   [12:0] tmp_fu_275_p2;
reg   [12:0] tmp_reg_913;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_103;
wire   [0:0] exitcond3_fu_269_p2;
wire   [11:0] tmp_2_fu_281_p1;
reg   [11:0] tmp_2_reg_918;
wire   [12:0] tmp_1_cast_fu_291_p1;
reg   [12:0] tmp_1_cast_reg_929;
wire   [11:0] j_cast2_fu_299_p1;
reg   [11:0] j_cast2_reg_934;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_120;
wire   [6:0] j_cast_fu_303_p1;
reg   [6:0] j_cast_reg_939;
wire   [5:0] j_1_fu_313_p2;
reg   [5:0] j_1_reg_952;
wire   [0:0] exitcond2_fu_307_p2;
wire   [12:0] tmp_16_fu_339_p2;
reg   [12:0] tmp_16_reg_962;
wire   [5:0] i_1_fu_344_p2;
wire   [0:0] grp_fu_251_p2;
reg   [0:0] tmp_7_reg_972;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_144;
reg   [0:0] tmp_3_reg_984;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_154;
reg   [0:0] tmp_10_reg_998;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_164;
reg   [0:0] tmp_13_reg_1010;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_174;
wire   [63:0] tmp_15_fu_411_p1;
reg   [63:0] tmp_15_reg_1019;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_187;
wire   [0:0] tmp_42_fu_420_p2;
reg   [0:0] tmp_42_reg_1034;
reg   [0:0] tmp_18_reg_1039;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_197;
reg   [0:0] tmp_21_reg_1053;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_207;
wire   [11:0] tmp_25_fu_473_p2;
reg   [11:0] tmp_25_reg_1065;
reg   [0:0] tmp_24_reg_1070;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_219;
wire   [0:0] p_4_fu_524_p2;
reg   [0:0] p_4_reg_1085;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_230;
wire   [0:0] tmp_29_fu_536_p2;
reg   [0:0] tmp_29_reg_1090;
wire   [0:0] p_5_fu_546_p2;
reg   [0:0] p_5_reg_1095;
wire   [0:0] tmp_30_fu_556_p2;
reg   [0:0] tmp_30_reg_1100;
wire   [2:0] tmp8_fu_609_p2;
reg   [2:0] tmp8_reg_1105;
wire   [2:0] tmp16_fu_651_p2;
reg   [2:0] tmp16_reg_1110;
wire   [2:0] tmp19_fu_677_p2;
reg   [2:0] tmp19_reg_1115;
wire   [0:0] tmp_7528_demorgan_fu_722_p2;
reg   [0:0] tmp_7528_demorgan_reg_1120;
wire   [11:0] next_mul_fu_858_p2;
reg   [11:0] next_mul_reg_1128;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_253;
wire   [5:0] k_1_fu_870_p2;
reg   [5:0] k_1_reg_1136;
wire   [5:0] l_1_fu_886_p2;
reg   [5:0] l_1_reg_1144;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_264;
wire   [63:0] tmp_43_fu_898_p1;
reg   [63:0] tmp_43_reg_1149;
wire   [0:0] exitcond_fu_880_p2;
reg   [5:0] i_reg_194;
reg   [5:0] j_reg_206;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_287;
reg   [5:0] k_reg_217;
reg   [11:0] phi_mul_reg_228;
reg   [5:0] l_reg_240;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_305;
wire   [0:0] exitcond1_fu_864_p2;
wire  signed [63:0] tmp_6_fu_334_p1;
wire   [63:0] tmp_s_fu_364_p1;
wire   [63:0] tmp_8_fu_383_p1;
wire   [63:0] tmp_12_fu_402_p1;
wire   [63:0] tmp_17_fu_416_p1;
wire   [63:0] tmp_20_fu_440_p1;
wire   [63:0] tmp_23_fu_459_p1;
wire   [63:0] tmp_26_fu_478_p1;
wire   [0:0] or_cond2_fu_842_p2;
reg   [31:0] count_fu_84;
wire   [31:0] count_1_fu_847_p2;
reg   [31:0] ImgIn_Addr_A_orig;
reg   [31:0] ImgOut_Addr_A_orig;
wire   [5:0] tmp_fu_275_p1;
wire   [11:0] tmp_1_fu_285_p2;
wire   [6:0] tmp1_fu_319_p2;
wire  signed [12:0] tmp1_cast_fu_325_p1;
wire   [12:0] tmp_5_fu_329_p2;
wire   [12:0] j_cast1_fu_295_p1;
wire   [6:0] tmp2_fu_350_p2;
wire  signed [11:0] tmp2_cast_fu_355_p1;
wire   [11:0] tmp_9_fu_359_p2;
wire   [6:0] tmp3_fu_369_p2;
wire  signed [11:0] tmp3_cast_fu_374_p1;
wire   [11:0] tmp_4_fu_378_p2;
wire   [6:0] tmp4_fu_388_p2;
wire  signed [11:0] tmp4_cast_fu_393_p1;
wire   [11:0] tmp_11_fu_397_p2;
wire   [11:0] tmp_14_fu_407_p2;
wire   [6:0] tmp5_fu_426_p2;
wire   [11:0] tmp5_cast_fu_431_p1;
wire   [11:0] tmp_19_fu_435_p2;
wire   [6:0] tmp6_fu_445_p2;
wire   [11:0] tmp6_cast_fu_450_p1;
wire   [11:0] tmp_22_fu_454_p2;
wire   [6:0] tmp7_fu_464_p2;
wire   [11:0] tmp7_cast_fu_469_p1;
wire   [0:0] not_s_fu_491_p2;
wire   [0:0] p_s_fu_496_p2;
wire   [0:0] not_1_fu_505_p2;
wire   [0:0] tmp_28_fu_510_p2;
wire   [0:0] not_2_fu_519_p2;
wire   [0:0] not_3_fu_530_p2;
wire   [0:0] not_4_fu_541_p2;
wire   [0:0] not_5_fu_551_p2;
wire   [0:0] not_6_fu_561_p2;
wire   [0:0] p_6_fu_566_p2;
wire   [0:0] not_7_fu_575_p2;
wire   [0:0] tmp_31_fu_580_p2;
wire   [1:0] tmp_35_cast_fu_501_p1;
wire   [1:0] tmp_46_cast_fu_585_p1;
wire   [1:0] tmp9_fu_589_p2;
wire   [1:0] tmp_44_cast_fu_571_p1;
wire   [1:0] tmp_37_cast_fu_515_p1;
wire   [1:0] tmp10_fu_599_p2;
wire   [2:0] tmp10_cast_fu_605_p1;
wire   [2:0] tmp9_cast_fu_595_p1;
wire   [1:0] tmp_57_cast_fu_628_p1;
wire   [1:0] p7_cast_fu_488_p1;
wire   [1:0] tmp14_fu_631_p2;
wire   [1:0] tmp_55_cast_fu_621_p1;
wire   [1:0] p3_cast_fu_485_p1;
wire   [1:0] tmp15_fu_641_p2;
wire   [2:0] tmp21_cast_fu_647_p1;
wire   [2:0] tmp20_cast_fu_637_p1;
wire   [1:0] tmp_53_cast_fu_615_p1;
wire   [1:0] tmp_54_cast_fu_618_p1;
wire   [1:0] tmp17_fu_657_p2;
wire   [1:0] p0_cast_fu_482_p1;
wire   [1:0] tmp_56_cast_fu_624_p1;
wire   [1:0] tmp18_fu_667_p2;
wire   [2:0] tmp24_cast_fu_673_p1;
wire   [2:0] tmp23_cast_fu_663_p1;
wire   [0:0] tmp_32_fu_683_p2;
wire   [0:0] tmp_33_fu_692_p2;
wire   [0:0] m1_fu_687_p2;
wire   [0:0] m2_fu_696_p2;
wire   [0:0] tmp_38_fu_707_p2;
wire   [0:0] tmp_39_fu_711_p2;
wire   [0:0] tmp_37_fu_701_p2;
wire   [0:0] tmp_40_fu_717_p2;
wire   [1:0] tmp_43_cast_fu_737_p1;
wire   [1:0] tmp_41_cast_fu_734_p1;
wire   [1:0] tmp12_fu_743_p2;
wire   [1:0] tmp_40_cast_fu_731_p1;
wire   [1:0] tmp_38_cast_fu_728_p1;
wire   [1:0] tmp13_fu_753_p2;
wire   [2:0] tmp13_cast_fu_759_p1;
wire   [2:0] tmp12_cast_fu_749_p1;
wire   [2:0] tmp11_fu_763_p2;
wire   [3:0] tmp11_cast_fu_769_p1;
wire   [3:0] tmp8_cast_fu_740_p1;
wire   [3:0] tmp22_cast_fu_782_p1;
wire   [3:0] tmp19_cast_fu_779_p1;
wire   [3:0] A_fu_773_p2;
wire   [3:0] B_fu_785_p2;
wire   [2:0] tmp_44_fu_797_p4;
wire   [0:0] icmp_fu_807_p2;
wire   [0:0] tmp_36_fu_813_p2;
wire   [0:0] tmp20_fu_819_p2;
wire   [0:0] tmp_34_fu_791_p2;
wire   [0:0] or_cond7_fu_825_p2;
wire   [0:0] tmp_41_fu_831_p2;
wire   [0:0] p_1_fu_836_p2;
wire   [11:0] l_cast_fu_876_p1;
wire   [11:0] tmp_35_fu_892_p2;
reg   [15:0] ap_NS_fsm;
wire   [12:0] tmp_fu_275_p10;


zs_func_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
zs_func_CRTL_BUS_s_axi_U(
    .AWVALID( s_axi_CRTL_BUS_AWVALID ),
    .AWREADY( s_axi_CRTL_BUS_AWREADY ),
    .AWADDR( s_axi_CRTL_BUS_AWADDR ),
    .WVALID( s_axi_CRTL_BUS_WVALID ),
    .WREADY( s_axi_CRTL_BUS_WREADY ),
    .WDATA( s_axi_CRTL_BUS_WDATA ),
    .WSTRB( s_axi_CRTL_BUS_WSTRB ),
    .ARVALID( s_axi_CRTL_BUS_ARVALID ),
    .ARREADY( s_axi_CRTL_BUS_ARREADY ),
    .ARADDR( s_axi_CRTL_BUS_ARADDR ),
    .RVALID( s_axi_CRTL_BUS_RVALID ),
    .RREADY( s_axi_CRTL_BUS_RREADY ),
    .RDATA( s_axi_CRTL_BUS_RDATA ),
    .RRESP( s_axi_CRTL_BUS_RRESP ),
    .BVALID( s_axi_CRTL_BUS_BVALID ),
    .BREADY( s_axi_CRTL_BUS_BREADY ),
    .BRESP( s_axi_CRTL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(ap_const_lv1_0 == or_cond2_fu_842_p2))) begin
        count_fu_84 <= count_1_fu_847_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        count_fu_84 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond2_fu_307_p2))) begin
        i_reg_194 <= i_1_fu_344_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_194 <= ap_const_lv6_1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        j_reg_206 <= j_1_reg_952;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_269_p2 == ap_const_lv1_0))) begin
        j_reg_206 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_880_p2))) begin
        k_reg_217 <= k_1_reg_1136;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_269_p2 == ap_const_lv1_0))) begin
        k_reg_217 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & (ap_const_lv1_0 == exitcond1_fu_864_p2))) begin
        l_reg_240 <= ap_const_lv6_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        l_reg_240 <= l_1_reg_1144;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_880_p2))) begin
        phi_mul_reg_228 <= next_mul_reg_1128;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_269_p2 == ap_const_lv1_0))) begin
        phi_mul_reg_228 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_952 <= j_1_fu_313_p2;
        j_cast2_reg_934[5 : 0] <= j_cast2_fu_299_p1[5 : 0];
        j_cast_reg_939[5 : 0] <= j_cast_fu_303_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        k_1_reg_1136 <= k_1_fu_870_p2;
        next_mul_reg_1128 <= next_mul_fu_858_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        l_1_reg_1144 <= l_1_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        p_4_reg_1085 <= p_4_fu_524_p2;
        p_5_reg_1095 <= p_5_fu_546_p2;
        tmp16_reg_1110 <= tmp16_fu_651_p2;
        tmp19_reg_1115 <= tmp19_fu_677_p2;
        tmp8_reg_1105 <= tmp8_fu_609_p2;
        tmp_29_reg_1090 <= tmp_29_fu_536_p2;
        tmp_30_reg_1100 <= tmp_30_fu_556_p2;
        tmp_7528_demorgan_reg_1120 <= tmp_7528_demorgan_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_10_reg_998 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_13_reg_1010 <= grp_fu_251_p2;
        tmp_15_reg_1019[11 : 0] <= tmp_15_fu_411_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond2_fu_307_p2))) begin
        tmp_16_reg_962 <= tmp_16_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_18_reg_1039 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond3_fu_269_p2 == ap_const_lv1_0))) begin
        tmp_1_cast_reg_929[11 : 1] <= tmp_1_cast_fu_291_p1[11 : 1];
        tmp_2_reg_918 <= tmp_2_fu_281_p1;
        tmp_reg_913 <= tmp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_21_reg_1053 <= grp_fu_251_p2;
        tmp_25_reg_1065 <= tmp_25_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        tmp_24_reg_1070 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_3_reg_984 <= grp_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_42_reg_1034 <= tmp_42_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & (ap_const_lv1_0 == exitcond_fu_880_p2))) begin
        tmp_43_reg_1149[11 : 0] <= tmp_43_fu_898_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_7_reg_972 <= grp_fu_251_p2;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or tmp_15_fu_411_p1 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st11_fsm_10 or tmp_43_reg_1149 or ap_sig_cseq_ST_st16_fsm_15 or tmp_6_fu_334_p1 or tmp_s_fu_364_p1 or tmp_8_fu_383_p1 or tmp_12_fu_402_p1 or tmp_17_fu_416_p1 or tmp_20_fu_440_p1 or tmp_23_fu_459_p1 or tmp_26_fu_478_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        ImgIn_Addr_A_orig = tmp_43_reg_1149;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        ImgIn_Addr_A_orig = tmp_26_fu_478_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ImgIn_Addr_A_orig = tmp_23_fu_459_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        ImgIn_Addr_A_orig = tmp_20_fu_440_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ImgIn_Addr_A_orig = tmp_17_fu_416_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        ImgIn_Addr_A_orig = tmp_15_fu_411_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ImgIn_Addr_A_orig = tmp_12_fu_402_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        ImgIn_Addr_A_orig = tmp_8_fu_383_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        ImgIn_Addr_A_orig = tmp_s_fu_364_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        ImgIn_Addr_A_orig = tmp_6_fu_334_p1;
    end else begin
        ImgIn_Addr_A_orig = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st16_fsm_15) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        ImgIn_EN_A = ap_const_logic_1;
    end else begin
        ImgIn_EN_A = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st16_fsm_15) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        ImgIn_WEN_A = ap_const_lv4_F;
    end else begin
        ImgIn_WEN_A = ap_const_lv4_0;
    end
end

always @ (tmp_15_reg_1019 or ap_sig_cseq_ST_st15_fsm_14 or tmp_43_fu_898_p1 or ap_sig_cseq_ST_st13_fsm_12) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        ImgOut_Addr_A_orig = tmp_15_reg_1019;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        ImgOut_Addr_A_orig = tmp_43_fu_898_p1;
    end else begin
        ImgOut_Addr_A_orig = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        ImgOut_EN_A = ap_const_logic_1;
    end else begin
        ImgOut_EN_A = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st13_fsm_12 or or_cond2_fu_842_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(ap_const_lv1_0 == or_cond2_fu_842_p2))) begin
        ImgOut_WEN_A = ap_const_lv4_F;
    end else begin
        ImgOut_WEN_A = ap_const_lv4_0;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_13 or exitcond1_fu_864_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_lv1_0 == exitcond1_fu_864_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_13 or exitcond1_fu_864_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_lv1_0 == exitcond1_fu_864_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_207) begin
    if (ap_sig_bdd_207) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_219) begin
    if (ap_sig_bdd_219) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_230) begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_287) begin
    if (ap_sig_bdd_287) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_253) begin
    if (ap_sig_bdd_253) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_264) begin
    if (ap_sig_bdd_264) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_305) begin
    if (ap_sig_bdd_305) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_34) begin
    if (ap_sig_bdd_34) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_103) begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_120) begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_144) begin
    if (ap_sig_bdd_144) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_154) begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_164) begin
    if (ap_sig_bdd_164) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_174) begin
    if (ap_sig_bdd_174) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_187) begin
    if (ap_sig_bdd_187) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_197) begin
    if (ap_sig_bdd_197) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond3_fu_269_p2 or exitcond2_fu_307_p2 or exitcond_fu_880_p2 or exitcond1_fu_864_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((exitcond3_fu_269_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond2_fu_307_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_864_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_880_p2)) begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign A_fu_773_p2 = (tmp11_cast_fu_769_p1 + tmp8_cast_fu_740_p1);

assign B_fu_785_p2 = (tmp22_cast_fu_782_p1 + tmp19_cast_fu_779_p1);

assign ImgIn_Addr_A = ImgIn_Addr_A_orig << ap_const_lv32_2;

assign ImgIn_Clk_A = ap_clk;

assign ImgIn_Din_A = ImgOut_Dout_A;

assign ImgIn_Rst_A = ap_rst_n_inv;

assign ImgOut_Addr_A = ImgOut_Addr_A_orig << ap_const_lv32_2;

assign ImgOut_Clk_A = ap_clk;

assign ImgOut_Din_A = ap_const_lv32_0;

assign ImgOut_Rst_A = ap_rst_n_inv;

assign ap_return = count_fu_84;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_144 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_164 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_174 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_187 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_197 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_207 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_219 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_253 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_264 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_287 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_305 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_34 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

assign count_1_fu_847_p2 = (count_fu_84 + ap_const_lv32_1);

assign exitcond1_fu_864_p2 = (k_reg_217 == ap_const_lv6_2A? 1'b1: 1'b0);

assign exitcond2_fu_307_p2 = (j_reg_206 == ap_const_lv6_32? 1'b1: 1'b0);

assign exitcond3_fu_269_p2 = (i_reg_194 == ap_const_lv6_2A? 1'b1: 1'b0);

assign exitcond_fu_880_p2 = (l_reg_240 == ap_const_lv6_32? 1'b1: 1'b0);

assign grp_fu_251_p2 = (ImgIn_Dout_A != ap_const_lv32_0? 1'b1: 1'b0);

assign i_1_fu_344_p2 = (i_reg_194 + ap_const_lv6_1);

assign icmp_fu_807_p2 = (tmp_44_fu_797_p4 != ap_const_lv3_0? 1'b1: 1'b0);

assign j_1_fu_313_p2 = (j_reg_206 + ap_const_lv6_1);

assign j_cast1_fu_295_p1 = j_reg_206;

assign j_cast2_fu_299_p1 = j_reg_206;

assign j_cast_fu_303_p1 = j_reg_206;

assign k_1_fu_870_p2 = (k_reg_217 + ap_const_lv6_1);

assign l_1_fu_886_p2 = (l_reg_240 + ap_const_lv6_1);

assign l_cast_fu_876_p1 = l_reg_240;

assign m1_fu_687_p2 = (tmp_24_reg_1070 & tmp_32_fu_683_p2);

assign m2_fu_696_p2 = (tmp_13_reg_1010 & tmp_33_fu_692_p2);

assign next_mul_fu_858_p2 = (phi_mul_reg_228 + ap_const_lv12_32);

assign not_1_fu_505_p2 = (tmp_10_reg_998 ^ ap_const_lv1_1);

assign not_2_fu_519_p2 = (tmp_18_reg_1039 ^ ap_const_lv1_1);

assign not_3_fu_530_p2 = (grp_fu_251_p2 ^ ap_const_lv1_1);

assign not_4_fu_541_p2 = (tmp_24_reg_1070 ^ ap_const_lv1_1);

assign not_5_fu_551_p2 = (tmp_21_reg_1053 ^ ap_const_lv1_1);

assign not_6_fu_561_p2 = (tmp_13_reg_1010 ^ ap_const_lv1_1);

assign not_7_fu_575_p2 = (tmp_7_reg_972 ^ ap_const_lv1_1);

assign not_s_fu_491_p2 = (tmp_3_reg_984 ^ ap_const_lv1_1);

assign or_cond2_fu_842_p2 = (p_1_fu_836_p2 & tmp_42_reg_1034);

assign or_cond7_fu_825_p2 = (tmp20_fu_819_p2 & tmp_34_fu_791_p2);

assign p0_cast_fu_482_p1 = tmp_7_reg_972;

assign p3_cast_fu_485_p1 = tmp_13_reg_1010;

assign p7_cast_fu_488_p1 = tmp_24_reg_1070;

assign p_1_fu_836_p2 = (or_cond7_fu_825_p2 & tmp_41_fu_831_p2);

assign p_4_fu_524_p2 = (grp_fu_251_p2 & not_2_fu_519_p2);

assign p_5_fu_546_p2 = (tmp_21_reg_1053 & not_4_fu_541_p2);

assign p_6_fu_566_p2 = (tmp_7_reg_972 & not_6_fu_561_p2);

assign p_s_fu_496_p2 = (tmp_10_reg_998 & not_s_fu_491_p2);

assign tmp10_cast_fu_605_p1 = tmp10_fu_599_p2;

assign tmp10_fu_599_p2 = (tmp_44_cast_fu_571_p1 + tmp_37_cast_fu_515_p1);

assign tmp11_cast_fu_769_p1 = tmp11_fu_763_p2;

assign tmp11_fu_763_p2 = (tmp13_cast_fu_759_p1 + tmp12_cast_fu_749_p1);

assign tmp12_cast_fu_749_p1 = tmp12_fu_743_p2;

assign tmp12_fu_743_p2 = (tmp_43_cast_fu_737_p1 + tmp_41_cast_fu_734_p1);

assign tmp13_cast_fu_759_p1 = tmp13_fu_753_p2;

assign tmp13_fu_753_p2 = (tmp_40_cast_fu_731_p1 + tmp_38_cast_fu_728_p1);

assign tmp14_fu_631_p2 = (tmp_57_cast_fu_628_p1 + p7_cast_fu_488_p1);

assign tmp15_fu_641_p2 = (tmp_55_cast_fu_621_p1 + p3_cast_fu_485_p1);

assign tmp16_fu_651_p2 = (tmp21_cast_fu_647_p1 + tmp20_cast_fu_637_p1);

assign tmp17_fu_657_p2 = (tmp_53_cast_fu_615_p1 + tmp_54_cast_fu_618_p1);

assign tmp18_fu_667_p2 = (p0_cast_fu_482_p1 + tmp_56_cast_fu_624_p1);

assign tmp19_cast_fu_779_p1 = tmp16_reg_1110;

assign tmp19_fu_677_p2 = (tmp24_cast_fu_673_p1 + tmp23_cast_fu_663_p1);

assign tmp1_cast_fu_325_p1 = $signed(tmp1_fu_319_p2);

assign tmp1_fu_319_p2 = ($signed(j_cast_fu_303_p1) + $signed(ap_const_lv7_4D));

assign tmp20_cast_fu_637_p1 = tmp14_fu_631_p2;

assign tmp20_fu_819_p2 = (icmp_fu_807_p2 & tmp_36_fu_813_p2);

assign tmp21_cast_fu_647_p1 = tmp15_fu_641_p2;

assign tmp22_cast_fu_782_p1 = tmp19_reg_1115;

assign tmp23_cast_fu_663_p1 = tmp17_fu_657_p2;

assign tmp24_cast_fu_673_p1 = tmp18_fu_667_p2;

assign tmp2_cast_fu_355_p1 = $signed(tmp2_fu_350_p2);

assign tmp2_fu_350_p2 = ($signed(j_cast_reg_939) + $signed(ap_const_lv7_4E));

assign tmp3_cast_fu_374_p1 = $signed(tmp3_fu_369_p2);

assign tmp3_fu_369_p2 = ($signed(j_cast_reg_939) + $signed(ap_const_lv7_4F));

assign tmp4_cast_fu_393_p1 = $signed(tmp4_fu_388_p2);

assign tmp4_fu_388_p2 = ($signed(j_cast_reg_939) + $signed(ap_const_lv7_7F));

assign tmp5_cast_fu_431_p1 = tmp5_fu_426_p2;

assign tmp5_fu_426_p2 = (j_cast_reg_939 + ap_const_lv7_31);

assign tmp6_cast_fu_450_p1 = tmp6_fu_445_p2;

assign tmp6_fu_445_p2 = (j_cast_reg_939 + ap_const_lv7_32);

assign tmp7_cast_fu_469_p1 = tmp7_fu_464_p2;

assign tmp7_fu_464_p2 = (j_cast_reg_939 + ap_const_lv7_33);

assign tmp8_cast_fu_740_p1 = tmp8_reg_1105;

assign tmp8_fu_609_p2 = (tmp10_cast_fu_605_p1 + tmp9_cast_fu_595_p1);

assign tmp9_cast_fu_595_p1 = tmp9_fu_589_p2;

assign tmp9_fu_589_p2 = (tmp_35_cast_fu_501_p1 + tmp_46_cast_fu_585_p1);

assign tmp_11_fu_397_p2 = ($signed(tmp4_cast_fu_393_p1) + $signed(tmp_2_reg_918));

assign tmp_12_fu_402_p1 = tmp_11_fu_397_p2;

assign tmp_14_fu_407_p2 = (j_cast2_reg_934 + tmp_2_reg_918);

assign tmp_15_fu_411_p1 = tmp_14_fu_407_p2;

assign tmp_16_fu_339_p2 = (j_cast1_fu_295_p1 + tmp_1_cast_reg_929);

assign tmp_17_fu_416_p1 = tmp_16_reg_962;

assign tmp_19_fu_435_p2 = (tmp5_cast_fu_431_p1 + tmp_2_reg_918);

assign tmp_1_cast_fu_291_p1 = tmp_1_fu_285_p2;

assign tmp_1_fu_285_p2 = (tmp_2_fu_281_p1 | ap_const_lv12_1);

assign tmp_20_fu_440_p1 = tmp_19_fu_435_p2;

assign tmp_22_fu_454_p2 = (tmp6_cast_fu_450_p1 + tmp_2_reg_918);

assign tmp_23_fu_459_p1 = tmp_22_fu_454_p2;

assign tmp_25_fu_473_p2 = (tmp7_cast_fu_469_p1 + tmp_2_reg_918);

assign tmp_26_fu_478_p1 = tmp_25_reg_1065;

assign tmp_28_fu_510_p2 = (tmp_18_reg_1039 & not_1_fu_505_p2);

assign tmp_29_fu_536_p2 = (tmp_24_reg_1070 & not_3_fu_530_p2);

assign tmp_2_fu_281_p1 = tmp_fu_275_p2[11:0];

assign tmp_30_fu_556_p2 = (tmp_13_reg_1010 & not_5_fu_551_p2);

assign tmp_31_fu_580_p2 = (tmp_3_reg_984 & not_7_fu_575_p2);

assign tmp_32_fu_683_p2 = (tmp_18_reg_1039 & tmp_3_reg_984);

assign tmp_33_fu_692_p2 = (tmp_24_reg_1070 & tmp_18_reg_1039);

assign tmp_34_fu_791_p2 = (A_fu_773_p2 == ap_const_lv4_1? 1'b1: 1'b0);

assign tmp_35_cast_fu_501_p1 = p_s_fu_496_p2;

assign tmp_35_fu_892_p2 = (phi_mul_reg_228 + l_cast_fu_876_p1);

assign tmp_36_fu_813_p2 = (B_fu_785_p2 < ap_const_lv4_7? 1'b1: 1'b0);

assign tmp_37_cast_fu_515_p1 = tmp_28_fu_510_p2;

assign tmp_37_fu_701_p2 = (m1_fu_687_p2 | m2_fu_696_p2);

assign tmp_38_cast_fu_728_p1 = p_4_reg_1085;

assign tmp_38_fu_707_p2 = (tmp_24_reg_1070 & tmp_3_reg_984);

assign tmp_39_fu_711_p2 = (tmp_32_fu_683_p2 | tmp_38_fu_707_p2);

assign tmp_40_cast_fu_731_p1 = tmp_29_reg_1090;

assign tmp_40_fu_717_p2 = (tmp_13_reg_1010 & tmp_39_fu_711_p2);

assign tmp_41_cast_fu_734_p1 = p_5_reg_1095;

assign tmp_41_fu_831_p2 = (tmp_7528_demorgan_reg_1120 ^ ap_const_lv1_1);

assign tmp_42_fu_420_p2 = (ImgIn_Dout_A == ap_const_lv32_FF? 1'b1: 1'b0);

assign tmp_43_cast_fu_737_p1 = tmp_30_reg_1100;

assign tmp_43_fu_898_p1 = tmp_35_fu_892_p2;

assign tmp_44_cast_fu_571_p1 = p_6_fu_566_p2;

assign tmp_44_fu_797_p4 = {{B_fu_785_p2[ap_const_lv32_3 : ap_const_lv32_1]}};

assign tmp_46_cast_fu_585_p1 = tmp_31_fu_580_p2;

assign tmp_4_fu_378_p2 = ($signed(tmp3_cast_fu_374_p1) + $signed(tmp_2_reg_918));

assign tmp_53_cast_fu_615_p1 = tmp_3_reg_984;

assign tmp_54_cast_fu_618_p1 = tmp_10_reg_998;

assign tmp_55_cast_fu_621_p1 = tmp_18_reg_1039;

assign tmp_56_cast_fu_624_p1 = grp_fu_251_p2;

assign tmp_57_cast_fu_628_p1 = tmp_21_reg_1053;

assign tmp_5_fu_329_p2 = ($signed(tmp1_cast_fu_325_p1) + $signed(tmp_reg_913));

assign tmp_6_fu_334_p1 = $signed(tmp_5_fu_329_p2);

assign tmp_7528_demorgan_fu_722_p2 = (tmp_37_fu_701_p2 & tmp_40_fu_717_p2);

assign tmp_8_fu_383_p1 = tmp_4_fu_378_p2;

assign tmp_9_fu_359_p2 = ($signed(tmp2_cast_fu_355_p1) + $signed(tmp_2_reg_918));

assign tmp_fu_275_p1 = tmp_fu_275_p10;

assign tmp_fu_275_p10 = i_reg_194;

assign tmp_fu_275_p2 = (ap_const_lv13_32 * tmp_fu_275_p1);

assign tmp_s_fu_364_p1 = tmp_9_fu_359_p2;

assign zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
always @ (posedge ap_clk) begin
    tmp_1_cast_reg_929[0] <= 1'b1;
    tmp_1_cast_reg_929[12] <= 1'b0;
    j_cast2_reg_934[11:6] <= 6'b000000;
    j_cast_reg_939[6] <= 1'b0;
    tmp_15_reg_1019[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_43_reg_1149[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end



endmodule //zs_func

