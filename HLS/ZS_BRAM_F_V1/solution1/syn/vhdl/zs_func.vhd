-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity zs_func is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ImgIn_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImgIn_EN_A : OUT STD_LOGIC;
    ImgIn_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    ImgIn_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImgIn_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    ImgIn_Clk_A : OUT STD_LOGIC;
    ImgIn_Rst_A : OUT STD_LOGIC;
    ImgOut_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImgOut_EN_A : OUT STD_LOGIC;
    ImgOut_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    ImgOut_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    ImgOut_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    ImgOut_Clk_A : OUT STD_LOGIC;
    ImgOut_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of zs_func is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "zs_func,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.387000,HLS_SYN_LAT=26918,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=301,HLS_SYN_LUT=663}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv13_32 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv7_4D : STD_LOGIC_VECTOR (6 downto 0) := "1001101";
    constant ap_const_lv7_4E : STD_LOGIC_VECTOR (6 downto 0) := "1001110";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv7_31 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv7_33 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal tmp_fu_275_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_913 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal exitcond3_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_918 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_cast_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_cast_reg_929 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast2_fu_299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast2_reg_934 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal j_cast_fu_303_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_cast_reg_939 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_fu_313_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_952 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_339_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_reg_962 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_fu_344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_144 : BOOLEAN;
    signal tmp_3_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal tmp_10_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_164 : BOOLEAN;
    signal tmp_13_reg_1010 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal tmp_15_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_187 : BOOLEAN;
    signal tmp_42_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1039 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_197 : BOOLEAN;
    signal tmp_21_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal tmp_25_fu_473_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_reg_1065 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_219 : BOOLEAN;
    signal p_4_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_4_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_230 : BOOLEAN;
    signal tmp_29_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_1090 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_5_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_609_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp8_reg_1105 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp16_fu_651_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp16_reg_1110 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp19_fu_677_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp19_reg_1115 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7528_demorgan_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7528_demorgan_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_858_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_1128 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_253 : BOOLEAN;
    signal k_1_fu_870_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_reg_1136 : STD_LOGIC_VECTOR (5 downto 0);
    signal l_1_fu_886_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal l_1_reg_1144 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_264 : BOOLEAN;
    signal tmp_43_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_reg_1149 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_194 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_206 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_287 : BOOLEAN;
    signal k_reg_217 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_228 : STD_LOGIC_VECTOR (11 downto 0);
    signal l_reg_240 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_305 : BOOLEAN;
    signal exitcond1_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_cond2_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ImgIn_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ImgOut_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_285_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_fu_325_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_329_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast1_fu_295_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp2_fu_350_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_cast_fu_355_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_369_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_cast_fu_374_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_378_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_fu_388_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_cast_fu_393_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_397_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_407_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_426_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_cast_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_435_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_fu_445_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_cast_fu_450_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_fu_454_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp7_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_cast_fu_469_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal not_s_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_3_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_4_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_5_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_6_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_6_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_7_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_cast_fu_501_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_46_cast_fu_585_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp9_fu_589_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_44_cast_fu_571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_37_cast_fu_515_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp10_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp10_cast_fu_605_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp9_cast_fu_595_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_57_cast_fu_628_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p7_cast_fu_488_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp14_fu_631_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_55_cast_fu_621_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p3_cast_fu_485_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp15_fu_641_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp21_cast_fu_647_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp20_cast_fu_637_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_53_cast_fu_615_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_54_cast_fu_618_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp17_fu_657_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p0_cast_fu_482_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_56_cast_fu_624_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp18_fu_667_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp24_cast_fu_673_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp23_cast_fu_663_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_32_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m2_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_cast_fu_737_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_cast_fu_734_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp12_fu_743_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_cast_fu_731_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_38_cast_fu_728_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp13_fu_753_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp13_cast_fu_759_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp12_cast_fu_749_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp11_fu_763_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp11_cast_fu_769_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp8_cast_fu_740_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp22_cast_fu_782_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp19_cast_fu_779_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_fu_773_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_fu_785_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_44_fu_797_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond7_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_cast_fu_876_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_892_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_275_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component zs_func_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    zs_func_CRTL_BUS_s_axi_U : component zs_func_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- count_fu_84 assign process. --
    count_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = or_cond2_fu_842_p2)))) then 
                count_fu_84 <= count_1_fu_847_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                count_fu_84 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_reg_194 assign process. --
    i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond2_fu_307_p2)))) then 
                i_reg_194 <= i_1_fu_344_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_194 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    -- j_reg_206 assign process. --
    j_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                j_reg_206 <= j_1_reg_952;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_269_p2 = ap_const_lv1_0))) then 
                j_reg_206 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- k_reg_217 assign process. --
    k_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_880_p2)))) then 
                k_reg_217 <= k_1_reg_1136;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_269_p2 = ap_const_lv1_0)))) then 
                k_reg_217 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- l_reg_240 assign process. --
    l_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond1_fu_864_p2))) then 
                l_reg_240 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                l_reg_240 <= l_1_reg_1144;
            end if; 
        end if;
    end process;

    -- phi_mul_reg_228 assign process. --
    phi_mul_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_880_p2)))) then 
                phi_mul_reg_228 <= next_mul_reg_1128;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond3_fu_269_p2 = ap_const_lv1_0)))) then 
                phi_mul_reg_228 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_952 <= j_1_fu_313_p2;
                    j_cast2_reg_934(5 downto 0) <= j_cast2_fu_299_p1(5 downto 0);
                    j_cast_reg_939(5 downto 0) <= j_cast_fu_303_p1(5 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                k_1_reg_1136 <= k_1_fu_870_p2;
                next_mul_reg_1128 <= next_mul_fu_858_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                l_1_reg_1144 <= l_1_fu_886_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                p_4_reg_1085 <= p_4_fu_524_p2;
                p_5_reg_1095 <= p_5_fu_546_p2;
                tmp16_reg_1110 <= tmp16_fu_651_p2;
                tmp19_reg_1115 <= tmp19_fu_677_p2;
                tmp8_reg_1105 <= tmp8_fu_609_p2;
                tmp_29_reg_1090 <= tmp_29_fu_536_p2;
                tmp_30_reg_1100 <= tmp_30_fu_556_p2;
                tmp_7528_demorgan_reg_1120 <= tmp_7528_demorgan_fu_722_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_10_reg_998 <= grp_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                tmp_13_reg_1010 <= grp_fu_251_p2;
                    tmp_15_reg_1019(11 downto 0) <= tmp_15_fu_411_p1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond2_fu_307_p2))) then
                tmp_16_reg_962 <= tmp_16_fu_339_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_18_reg_1039 <= grp_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_269_p2 = ap_const_lv1_0))) then
                    tmp_1_cast_reg_929(11 downto 1) <= tmp_1_cast_fu_291_p1(11 downto 1);
                tmp_2_reg_918 <= tmp_2_fu_281_p1;
                tmp_reg_913 <= tmp_fu_275_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_21_reg_1053 <= grp_fu_251_p2;
                tmp_25_reg_1065 <= tmp_25_fu_473_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_24_reg_1070 <= grp_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_3_reg_984 <= grp_fu_251_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_42_reg_1034 <= tmp_42_fu_420_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and (ap_const_lv1_0 = exitcond_fu_880_p2))) then
                    tmp_43_reg_1149(11 downto 0) <= tmp_43_fu_898_p1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_7_reg_972 <= grp_fu_251_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_929(0) <= '1';
    tmp_1_cast_reg_929(12) <= '0';
    j_cast2_reg_934(11 downto 6) <= "000000";
    j_cast_reg_939(6) <= '0';
    tmp_15_reg_1019(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_43_reg_1149(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_269_p2, exitcond2_fu_307_p2, exitcond_fu_880_p2, exitcond1_fu_864_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond3_fu_269_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_307_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_864_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                if ((ap_const_lv1_0 = exitcond_fu_880_p2)) then
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_fu_773_p2 <= std_logic_vector(unsigned(tmp11_cast_fu_769_p1) + unsigned(tmp8_cast_fu_740_p1));
    B_fu_785_p2 <= std_logic_vector(unsigned(tmp22_cast_fu_782_p1) + unsigned(tmp19_cast_fu_779_p1));
    ImgIn_Addr_A <= std_logic_vector(shift_left(unsigned(ImgIn_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- ImgIn_Addr_A_orig assign process. --
    ImgIn_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, tmp_15_fu_411_p1, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, tmp_43_reg_1149, ap_sig_cseq_ST_st16_fsm_15, tmp_6_fu_334_p1, tmp_s_fu_364_p1, tmp_8_fu_383_p1, tmp_12_fu_402_p1, tmp_17_fu_416_p1, tmp_20_fu_440_p1, tmp_23_fu_459_p1, tmp_26_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            ImgIn_Addr_A_orig <= tmp_43_reg_1149(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            ImgIn_Addr_A_orig <= tmp_26_fu_478_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            ImgIn_Addr_A_orig <= tmp_23_fu_459_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ImgIn_Addr_A_orig <= tmp_20_fu_440_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            ImgIn_Addr_A_orig <= tmp_17_fu_416_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ImgIn_Addr_A_orig <= tmp_15_fu_411_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            ImgIn_Addr_A_orig <= tmp_12_fu_402_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            ImgIn_Addr_A_orig <= tmp_8_fu_383_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            ImgIn_Addr_A_orig <= tmp_s_fu_364_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            ImgIn_Addr_A_orig <= tmp_6_fu_334_p1(32 - 1 downto 0);
        else 
            ImgIn_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ImgIn_Clk_A <= ap_clk;
    ImgIn_Din_A <= ImgOut_Dout_A;

    -- ImgIn_EN_A assign process. --
    ImgIn_EN_A_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            ImgIn_EN_A <= ap_const_logic_1;
        else 
            ImgIn_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    ImgIn_Rst_A <= ap_rst_n_inv;

    -- ImgIn_WEN_A assign process. --
    ImgIn_WEN_A_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            ImgIn_WEN_A <= ap_const_lv4_F;
        else 
            ImgIn_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    ImgOut_Addr_A <= std_logic_vector(shift_left(unsigned(ImgOut_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- ImgOut_Addr_A_orig assign process. --
    ImgOut_Addr_A_orig_assign_proc : process(tmp_15_reg_1019, ap_sig_cseq_ST_st15_fsm_14, tmp_43_fu_898_p1, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            ImgOut_Addr_A_orig <= tmp_15_reg_1019(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            ImgOut_Addr_A_orig <= tmp_43_fu_898_p1(32 - 1 downto 0);
        else 
            ImgOut_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ImgOut_Clk_A <= ap_clk;
    ImgOut_Din_A <= ap_const_lv32_0;

    -- ImgOut_EN_A assign process. --
    ImgOut_EN_A_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            ImgOut_EN_A <= ap_const_logic_1;
        else 
            ImgOut_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    ImgOut_Rst_A <= ap_rst_n_inv;

    -- ImgOut_WEN_A assign process. --
    ImgOut_WEN_A_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, or_cond2_fu_842_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = or_cond2_fu_842_p2))))) then 
            ImgOut_WEN_A <= ap_const_lv4_F;
        else 
            ImgOut_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond1_fu_864_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond1_fu_864_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, exitcond1_fu_864_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not((ap_const_lv1_0 = exitcond1_fu_864_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= count_fu_84;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_144 assign process. --
    ap_sig_bdd_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_144 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_164 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_187 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_197 assign process. --
    ap_sig_bdd_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_197 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_219 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_230 assign process. --
    ap_sig_bdd_230_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_230 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_253 assign process. --
    ap_sig_bdd_253_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_253 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_264 assign process. --
    ap_sig_bdd_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_264 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_287 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_305 assign process. --
    ap_sig_bdd_305_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_305 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_219)
    begin
        if (ap_sig_bdd_219) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_230)
    begin
        if (ap_sig_bdd_230) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_287)
    begin
        if (ap_sig_bdd_287) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_253)
    begin
        if (ap_sig_bdd_253) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_264)
    begin
        if (ap_sig_bdd_264) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_305)
    begin
        if (ap_sig_bdd_305) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_144)
    begin
        if (ap_sig_bdd_144) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_164)
    begin
        if (ap_sig_bdd_164) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_187)
    begin
        if (ap_sig_bdd_187) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_197)
    begin
        if (ap_sig_bdd_197) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_847_p2 <= std_logic_vector(unsigned(count_fu_84) + unsigned(ap_const_lv32_1));
    exitcond1_fu_864_p2 <= "1" when (k_reg_217 = ap_const_lv6_2A) else "0";
    exitcond2_fu_307_p2 <= "1" when (j_reg_206 = ap_const_lv6_32) else "0";
    exitcond3_fu_269_p2 <= "1" when (i_reg_194 = ap_const_lv6_2A) else "0";
    exitcond_fu_880_p2 <= "1" when (l_reg_240 = ap_const_lv6_32) else "0";
    grp_fu_251_p2 <= "0" when (ImgIn_Dout_A = ap_const_lv32_0) else "1";
    i_1_fu_344_p2 <= std_logic_vector(unsigned(i_reg_194) + unsigned(ap_const_lv6_1));
    icmp_fu_807_p2 <= "0" when (tmp_44_fu_797_p4 = ap_const_lv3_0) else "1";
    j_1_fu_313_p2 <= std_logic_vector(unsigned(j_reg_206) + unsigned(ap_const_lv6_1));
    j_cast1_fu_295_p1 <= std_logic_vector(resize(unsigned(j_reg_206),13));
    j_cast2_fu_299_p1 <= std_logic_vector(resize(unsigned(j_reg_206),12));
    j_cast_fu_303_p1 <= std_logic_vector(resize(unsigned(j_reg_206),7));
    k_1_fu_870_p2 <= std_logic_vector(unsigned(k_reg_217) + unsigned(ap_const_lv6_1));
    l_1_fu_886_p2 <= std_logic_vector(unsigned(l_reg_240) + unsigned(ap_const_lv6_1));
    l_cast_fu_876_p1 <= std_logic_vector(resize(unsigned(l_reg_240),12));
    m1_fu_687_p2 <= (tmp_24_reg_1070 and tmp_32_fu_683_p2);
    m2_fu_696_p2 <= (tmp_13_reg_1010 and tmp_33_fu_692_p2);
    next_mul_fu_858_p2 <= std_logic_vector(unsigned(phi_mul_reg_228) + unsigned(ap_const_lv12_32));
    not_1_fu_505_p2 <= (tmp_10_reg_998 xor ap_const_lv1_1);
    not_2_fu_519_p2 <= (tmp_18_reg_1039 xor ap_const_lv1_1);
    not_3_fu_530_p2 <= (grp_fu_251_p2 xor ap_const_lv1_1);
    not_4_fu_541_p2 <= (tmp_24_reg_1070 xor ap_const_lv1_1);
    not_5_fu_551_p2 <= (tmp_21_reg_1053 xor ap_const_lv1_1);
    not_6_fu_561_p2 <= (tmp_13_reg_1010 xor ap_const_lv1_1);
    not_7_fu_575_p2 <= (tmp_7_reg_972 xor ap_const_lv1_1);
    not_s_fu_491_p2 <= (tmp_3_reg_984 xor ap_const_lv1_1);
    or_cond2_fu_842_p2 <= (p_1_fu_836_p2 and tmp_42_reg_1034);
    or_cond7_fu_825_p2 <= (tmp20_fu_819_p2 and tmp_34_fu_791_p2);
    p0_cast_fu_482_p1 <= std_logic_vector(resize(unsigned(tmp_7_reg_972),2));
    p3_cast_fu_485_p1 <= std_logic_vector(resize(unsigned(tmp_13_reg_1010),2));
    p7_cast_fu_488_p1 <= std_logic_vector(resize(unsigned(tmp_24_reg_1070),2));
    p_1_fu_836_p2 <= (or_cond7_fu_825_p2 and tmp_41_fu_831_p2);
    p_4_fu_524_p2 <= (grp_fu_251_p2 and not_2_fu_519_p2);
    p_5_fu_546_p2 <= (tmp_21_reg_1053 and not_4_fu_541_p2);
    p_6_fu_566_p2 <= (tmp_7_reg_972 and not_6_fu_561_p2);
    p_s_fu_496_p2 <= (tmp_10_reg_998 and not_s_fu_491_p2);
    tmp10_cast_fu_605_p1 <= std_logic_vector(resize(unsigned(tmp10_fu_599_p2),3));
    tmp10_fu_599_p2 <= std_logic_vector(unsigned(tmp_44_cast_fu_571_p1) + unsigned(tmp_37_cast_fu_515_p1));
    tmp11_cast_fu_769_p1 <= std_logic_vector(resize(unsigned(tmp11_fu_763_p2),4));
    tmp11_fu_763_p2 <= std_logic_vector(unsigned(tmp13_cast_fu_759_p1) + unsigned(tmp12_cast_fu_749_p1));
    tmp12_cast_fu_749_p1 <= std_logic_vector(resize(unsigned(tmp12_fu_743_p2),3));
    tmp12_fu_743_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_737_p1) + unsigned(tmp_41_cast_fu_734_p1));
    tmp13_cast_fu_759_p1 <= std_logic_vector(resize(unsigned(tmp13_fu_753_p2),3));
    tmp13_fu_753_p2 <= std_logic_vector(unsigned(tmp_40_cast_fu_731_p1) + unsigned(tmp_38_cast_fu_728_p1));
    tmp14_fu_631_p2 <= std_logic_vector(unsigned(tmp_57_cast_fu_628_p1) + unsigned(p7_cast_fu_488_p1));
    tmp15_fu_641_p2 <= std_logic_vector(unsigned(tmp_55_cast_fu_621_p1) + unsigned(p3_cast_fu_485_p1));
    tmp16_fu_651_p2 <= std_logic_vector(unsigned(tmp21_cast_fu_647_p1) + unsigned(tmp20_cast_fu_637_p1));
    tmp17_fu_657_p2 <= std_logic_vector(unsigned(tmp_53_cast_fu_615_p1) + unsigned(tmp_54_cast_fu_618_p1));
    tmp18_fu_667_p2 <= std_logic_vector(unsigned(p0_cast_fu_482_p1) + unsigned(tmp_56_cast_fu_624_p1));
    tmp19_cast_fu_779_p1 <= std_logic_vector(resize(unsigned(tmp16_reg_1110),4));
    tmp19_fu_677_p2 <= std_logic_vector(unsigned(tmp24_cast_fu_673_p1) + unsigned(tmp23_cast_fu_663_p1));
        tmp1_cast_fu_325_p1 <= std_logic_vector(resize(signed(tmp1_fu_319_p2),13));

    tmp1_fu_319_p2 <= std_logic_vector(unsigned(j_cast_fu_303_p1) + unsigned(ap_const_lv7_4D));
    tmp20_cast_fu_637_p1 <= std_logic_vector(resize(unsigned(tmp14_fu_631_p2),3));
    tmp20_fu_819_p2 <= (icmp_fu_807_p2 and tmp_36_fu_813_p2);
    tmp21_cast_fu_647_p1 <= std_logic_vector(resize(unsigned(tmp15_fu_641_p2),3));
    tmp22_cast_fu_782_p1 <= std_logic_vector(resize(unsigned(tmp19_reg_1115),4));
    tmp23_cast_fu_663_p1 <= std_logic_vector(resize(unsigned(tmp17_fu_657_p2),3));
    tmp24_cast_fu_673_p1 <= std_logic_vector(resize(unsigned(tmp18_fu_667_p2),3));
        tmp2_cast_fu_355_p1 <= std_logic_vector(resize(signed(tmp2_fu_350_p2),12));

    tmp2_fu_350_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_4E));
        tmp3_cast_fu_374_p1 <= std_logic_vector(resize(signed(tmp3_fu_369_p2),12));

    tmp3_fu_369_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_4F));
        tmp4_cast_fu_393_p1 <= std_logic_vector(resize(signed(tmp4_fu_388_p2),12));

    tmp4_fu_388_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_7F));
    tmp5_cast_fu_431_p1 <= std_logic_vector(resize(unsigned(tmp5_fu_426_p2),12));
    tmp5_fu_426_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_31));
    tmp6_cast_fu_450_p1 <= std_logic_vector(resize(unsigned(tmp6_fu_445_p2),12));
    tmp6_fu_445_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_32));
    tmp7_cast_fu_469_p1 <= std_logic_vector(resize(unsigned(tmp7_fu_464_p2),12));
    tmp7_fu_464_p2 <= std_logic_vector(unsigned(j_cast_reg_939) + unsigned(ap_const_lv7_33));
    tmp8_cast_fu_740_p1 <= std_logic_vector(resize(unsigned(tmp8_reg_1105),4));
    tmp8_fu_609_p2 <= std_logic_vector(unsigned(tmp10_cast_fu_605_p1) + unsigned(tmp9_cast_fu_595_p1));
    tmp9_cast_fu_595_p1 <= std_logic_vector(resize(unsigned(tmp9_fu_589_p2),3));
    tmp9_fu_589_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_501_p1) + unsigned(tmp_46_cast_fu_585_p1));
    tmp_11_fu_397_p2 <= std_logic_vector(signed(tmp4_cast_fu_393_p1) + signed(tmp_2_reg_918));
    tmp_12_fu_402_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_397_p2),64));
    tmp_14_fu_407_p2 <= std_logic_vector(unsigned(j_cast2_reg_934) + unsigned(tmp_2_reg_918));
    tmp_15_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_407_p2),64));
    tmp_16_fu_339_p2 <= std_logic_vector(unsigned(j_cast1_fu_295_p1) + unsigned(tmp_1_cast_reg_929));
    tmp_17_fu_416_p1 <= std_logic_vector(resize(unsigned(tmp_16_reg_962),64));
    tmp_19_fu_435_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_431_p1) + unsigned(tmp_2_reg_918));
    tmp_1_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_285_p2),13));
    tmp_1_fu_285_p2 <= (tmp_2_fu_281_p1 or ap_const_lv12_1);
    tmp_20_fu_440_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_435_p2),64));
    tmp_22_fu_454_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_450_p1) + unsigned(tmp_2_reg_918));
    tmp_23_fu_459_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_454_p2),64));
    tmp_25_fu_473_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_469_p1) + unsigned(tmp_2_reg_918));
    tmp_26_fu_478_p1 <= std_logic_vector(resize(unsigned(tmp_25_reg_1065),64));
    tmp_28_fu_510_p2 <= (tmp_18_reg_1039 and not_1_fu_505_p2);
    tmp_29_fu_536_p2 <= (tmp_24_reg_1070 and not_3_fu_530_p2);
    tmp_2_fu_281_p1 <= tmp_fu_275_p2(12 - 1 downto 0);
    tmp_30_fu_556_p2 <= (tmp_13_reg_1010 and not_5_fu_551_p2);
    tmp_31_fu_580_p2 <= (tmp_3_reg_984 and not_7_fu_575_p2);
    tmp_32_fu_683_p2 <= (tmp_18_reg_1039 and tmp_3_reg_984);
    tmp_33_fu_692_p2 <= (tmp_24_reg_1070 and tmp_18_reg_1039);
    tmp_34_fu_791_p2 <= "1" when (A_fu_773_p2 = ap_const_lv4_1) else "0";
    tmp_35_cast_fu_501_p1 <= std_logic_vector(resize(unsigned(p_s_fu_496_p2),2));
    tmp_35_fu_892_p2 <= std_logic_vector(unsigned(phi_mul_reg_228) + unsigned(l_cast_fu_876_p1));
    tmp_36_fu_813_p2 <= "1" when (unsigned(B_fu_785_p2) < unsigned(ap_const_lv4_7)) else "0";
    tmp_37_cast_fu_515_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_510_p2),2));
    tmp_37_fu_701_p2 <= (m1_fu_687_p2 or m2_fu_696_p2);
    tmp_38_cast_fu_728_p1 <= std_logic_vector(resize(unsigned(p_4_reg_1085),2));
    tmp_38_fu_707_p2 <= (tmp_24_reg_1070 and tmp_3_reg_984);
    tmp_39_fu_711_p2 <= (tmp_32_fu_683_p2 or tmp_38_fu_707_p2);
    tmp_40_cast_fu_731_p1 <= std_logic_vector(resize(unsigned(tmp_29_reg_1090),2));
    tmp_40_fu_717_p2 <= (tmp_13_reg_1010 and tmp_39_fu_711_p2);
    tmp_41_cast_fu_734_p1 <= std_logic_vector(resize(unsigned(p_5_reg_1095),2));
    tmp_41_fu_831_p2 <= (tmp_7528_demorgan_reg_1120 xor ap_const_lv1_1);
    tmp_42_fu_420_p2 <= "1" when (ImgIn_Dout_A = ap_const_lv32_FF) else "0";
    tmp_43_cast_fu_737_p1 <= std_logic_vector(resize(unsigned(tmp_30_reg_1100),2));
    tmp_43_fu_898_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_892_p2),64));
    tmp_44_cast_fu_571_p1 <= std_logic_vector(resize(unsigned(p_6_fu_566_p2),2));
    tmp_44_fu_797_p4 <= B_fu_785_p2(3 downto 1);
    tmp_46_cast_fu_585_p1 <= std_logic_vector(resize(unsigned(tmp_31_fu_580_p2),2));
    tmp_4_fu_378_p2 <= std_logic_vector(signed(tmp3_cast_fu_374_p1) + signed(tmp_2_reg_918));
    tmp_53_cast_fu_615_p1 <= std_logic_vector(resize(unsigned(tmp_3_reg_984),2));
    tmp_54_cast_fu_618_p1 <= std_logic_vector(resize(unsigned(tmp_10_reg_998),2));
    tmp_55_cast_fu_621_p1 <= std_logic_vector(resize(unsigned(tmp_18_reg_1039),2));
    tmp_56_cast_fu_624_p1 <= std_logic_vector(resize(unsigned(grp_fu_251_p2),2));
    tmp_57_cast_fu_628_p1 <= std_logic_vector(resize(unsigned(tmp_21_reg_1053),2));
    tmp_5_fu_329_p2 <= std_logic_vector(signed(tmp1_cast_fu_325_p1) + signed(tmp_reg_913));
        tmp_6_fu_334_p1 <= std_logic_vector(resize(signed(tmp_5_fu_329_p2),64));

    tmp_7528_demorgan_fu_722_p2 <= (tmp_37_fu_701_p2 and tmp_40_fu_717_p2);
    tmp_8_fu_383_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_378_p2),64));
    tmp_9_fu_359_p2 <= std_logic_vector(signed(tmp2_cast_fu_355_p1) + signed(tmp_2_reg_918));
    tmp_fu_275_p1 <= tmp_fu_275_p10(6 - 1 downto 0);
    tmp_fu_275_p10 <= std_logic_vector(resize(unsigned(i_reg_194),13));
    tmp_fu_275_p2 <= std_logic_vector(resize(unsigned(ap_const_lv13_32) * unsigned(tmp_fu_275_p1), 13));
    tmp_s_fu_364_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_359_p2),64));
    zs_func_CRTL_BUS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
end behav;
