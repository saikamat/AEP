// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      zs_func
`define AUTOTB_DUT_INST AESL_inst_zs_func
`define AUTOTB_TOP      apatb_zs_func_top
`define AUTOTB_LAT_RESULT_FILE "zs_func.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "zs_func.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_zs_func_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  10
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00
`define LENGTH_ImgIn 2100
`define LENGTH_ImgOut 2100
`define LENGTH_ap_return 1

`define	AESL_BRAM_ImgIn AESL_autobram_ImgIn
`define	AESL_BRAM_INST_ImgIn bram_inst_ImgIn
`define	AESL_BRAM_ImgOut AESL_autobram_ImgOut
`define	AESL_BRAM_INST_ImgOut bram_inst_ImgOut
`define AUTOTB_TVIN_ImgIn  "./c.zs_func.autotvin_ImgIn.dat"
`define AUTOTB_TVIN_ImgOut  "./c.zs_func.autotvin_ImgOut.dat"
`define AUTOTB_TVIN_ImgIn_out_wrapc  "./rtl.zs_func.autotvin_ImgIn.dat"
`define AUTOTB_TVIN_ImgOut_out_wrapc  "./rtl.zs_func.autotvin_ImgOut.dat"
`define AUTOTB_TVOUT_ImgIn  "./c.zs_func.autotvout_ImgIn.dat"
`define AUTOTB_TVOUT_ImgOut  "./c.zs_func.autotvout_ImgOut.dat"
`define AUTOTB_TVOUT_ap_return  "./c.zs_func.autotvout_ap_return.dat"
`define AUTOTB_TVOUT_ImgIn_out_wrapc  "./impl_rtl.zs_func.autotvout_ImgIn.dat"
`define AUTOTB_TVOUT_ImgOut_out_wrapc  "./impl_rtl.zs_func.autotvout_ImgOut.dat"
`define AUTOTB_TVOUT_ap_return_out_wrapc  "./impl_rtl.zs_func.autotvout_ap_return.dat"

module `AUTOTB_TOP;

task read_token;
    input integer fp;
    output reg [199 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [199 : 0] token1;
    reg [199 : 0] token2;
    reg [199 : 0] golden;
    reg [199 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
	              $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
	          read_token(fp1, token1);
	          read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                ret = $sscanf(token2, "0x%x", result);
	              if (ret != 1) begin
	                  $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
	              end
                if(golden != result) begin
	                  $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
	                  $finish;
                end
	              read_token(fp1, token1);
	              read_token(fp2, token2);
            end
	          read_token(fp1, token1);
	          read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [16 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [16 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire [4 : 0] CRTL_BUS_AWADDR;
wire  CRTL_BUS_AWVALID;
wire  CRTL_BUS_AWREADY;
wire  CRTL_BUS_WVALID;
wire  CRTL_BUS_WREADY;
wire [31 : 0] CRTL_BUS_WDATA;
wire [3 : 0] CRTL_BUS_WSTRB;
wire [4 : 0] CRTL_BUS_ARADDR;
wire  CRTL_BUS_ARVALID;
wire  CRTL_BUS_ARREADY;
wire  CRTL_BUS_RVALID;
wire  CRTL_BUS_RREADY;
wire [31 : 0] CRTL_BUS_RDATA;
wire [1 : 0] CRTL_BUS_RRESP;
wire  CRTL_BUS_BVALID;
wire  CRTL_BUS_BREADY;
wire [1 : 0] CRTL_BUS_BRESP;
wire [31 : 0] ImgIn_ADDR_A;
wire  ImgIn_EN_A;
wire [3 : 0] ImgIn_WEN_A;
wire [31 : 0] ImgIn_DIN_A;
wire [31 : 0] ImgIn_DOUT_A;
wire  ImgIn_CLK_A;
wire  ImgIn_RST_A;
wire [31 : 0] ImgOut_ADDR_A;
wire  ImgOut_EN_A;
wire [3 : 0] ImgOut_WEN_A;
wire [31 : 0] ImgOut_DIN_A;
wire [31 : 0] ImgOut_DOUT_A;
wire  ImgOut_CLK_A;
wire  ImgOut_RST_A;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire CRTL_BUS_read_data_finish;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
	.s_axi_CRTL_BUS_AWADDR(CRTL_BUS_AWADDR),
	.s_axi_CRTL_BUS_AWVALID(CRTL_BUS_AWVALID),
	.s_axi_CRTL_BUS_AWREADY(CRTL_BUS_AWREADY),
	.s_axi_CRTL_BUS_WVALID(CRTL_BUS_WVALID),
	.s_axi_CRTL_BUS_WREADY(CRTL_BUS_WREADY),
	.s_axi_CRTL_BUS_WDATA(CRTL_BUS_WDATA),
	.s_axi_CRTL_BUS_WSTRB(CRTL_BUS_WSTRB),
	.s_axi_CRTL_BUS_ARADDR(CRTL_BUS_ARADDR),
	.s_axi_CRTL_BUS_ARVALID(CRTL_BUS_ARVALID),
	.s_axi_CRTL_BUS_ARREADY(CRTL_BUS_ARREADY),
	.s_axi_CRTL_BUS_RVALID(CRTL_BUS_RVALID),
	.s_axi_CRTL_BUS_RREADY(CRTL_BUS_RREADY),
	.s_axi_CRTL_BUS_RDATA(CRTL_BUS_RDATA),
	.s_axi_CRTL_BUS_RRESP(CRTL_BUS_RRESP),
	.s_axi_CRTL_BUS_BVALID(CRTL_BUS_BVALID),
	.s_axi_CRTL_BUS_BREADY(CRTL_BUS_BREADY),
	.s_axi_CRTL_BUS_BRESP(CRTL_BUS_BRESP),
	.ap_clk(ap_clk),
	.ap_rst_n(ap_rst_n),
	.ImgIn_Addr_A(ImgIn_ADDR_A),
	.ImgIn_EN_A(ImgIn_EN_A),
	.ImgIn_WEN_A(ImgIn_WEN_A),
	.ImgIn_Din_A(ImgIn_DIN_A),
	.ImgIn_Dout_A(ImgIn_DOUT_A),
	.ImgIn_Clk_A(ImgIn_CLK_A),
	.ImgIn_Rst_A(ImgIn_RST_A),
	.ImgOut_Addr_A(ImgOut_ADDR_A),
	.ImgOut_EN_A(ImgOut_EN_A),
	.ImgOut_WEN_A(ImgOut_WEN_A),
	.ImgOut_Din_A(ImgOut_DIN_A),
	.ImgOut_Dout_A(ImgOut_DOUT_A),
	.ImgOut_Clk_A(ImgOut_CLK_A),
	.ImgOut_Rst_A(ImgOut_RST_A),
	.interrupt(interrupt));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst_n = AESL_reset;
assign ap_rst_n_n = ~AESL_reset;
assign AESL_reset = rst;
assign AESL_start = start;
assign AESL_ce = ce;
assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status ;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status  & CRTL_BUS_read_data_finish;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end
//------------------------bramImgIn Instantiation--------------

// The input and output of bramImgIn
wire  bramImgIn_Clk_A, bramImgIn_Clk_B;
wire  bramImgIn_EN_A, bramImgIn_EN_B;
wire  [4 - 1 : 0] bramImgIn_WEN_A, bramImgIn_WEN_B;
wire    [31 : 0]	bramImgIn_Addr_A, bramImgIn_Addr_B;
wire	[31 : 0]	bramImgIn_Din_A, bramImgIn_Din_B;
wire    [31 : 0]	bramImgIn_Dout_A, bramImgIn_Dout_B;
wire	bramImgIn_ready;
wire	bramImgIn_done;

`AESL_BRAM_ImgIn `AESL_BRAM_INST_ImgIn(
    .Clk_A    (bramImgIn_Clk_A),
    .Rst_A    (bramImgIn_Rst_A),
    .EN_A     (bramImgIn_EN_A),
    .WEN_A    (bramImgIn_WEN_A),
    .Addr_A   (bramImgIn_Addr_A),
    .Din_A    (bramImgIn_Din_A),
    .Dout_A   (bramImgIn_Dout_A),
    .Clk_B    (bramImgIn_Clk_B),
    .Rst_B    (bramImgIn_Rst_B),
    .EN_B     (bramImgIn_EN_B),
    .WEN_B    (bramImgIn_WEN_B),
    .Addr_B   (bramImgIn_Addr_B),
    .Din_B    (bramImgIn_Din_B),
    .Dout_B   (bramImgIn_Dout_B),
    .ready	(bramImgIn_ready),
    .done	    (bramImgIn_done)
);

// Assignment between dut and bramImgIn
assign bramImgIn_Clk_A = ImgIn_CLK_A;
assign bramImgIn_Rst_A = ImgIn_RST_A;
assign bramImgIn_Addr_A = ImgIn_ADDR_A;
assign bramImgIn_EN_A = ImgIn_EN_A;
assign ImgIn_DOUT_A = bramImgIn_Dout_A;
assign bramImgIn_WEN_A = ImgIn_WEN_A;
assign bramImgIn_Din_A = ImgIn_DIN_A;
assign bramImgIn_ready= ready;
assign bramImgIn_done = interface_done;


//------------------------bramImgOut Instantiation--------------

// The input and output of bramImgOut
wire  bramImgOut_Clk_A, bramImgOut_Clk_B;
wire  bramImgOut_EN_A, bramImgOut_EN_B;
wire  [4 - 1 : 0] bramImgOut_WEN_A, bramImgOut_WEN_B;
wire    [31 : 0]	bramImgOut_Addr_A, bramImgOut_Addr_B;
wire	[31 : 0]	bramImgOut_Din_A, bramImgOut_Din_B;
wire    [31 : 0]	bramImgOut_Dout_A, bramImgOut_Dout_B;
wire	bramImgOut_ready;
wire	bramImgOut_done;

`AESL_BRAM_ImgOut `AESL_BRAM_INST_ImgOut(
    .Clk_A    (bramImgOut_Clk_A),
    .Rst_A    (bramImgOut_Rst_A),
    .EN_A     (bramImgOut_EN_A),
    .WEN_A    (bramImgOut_WEN_A),
    .Addr_A   (bramImgOut_Addr_A),
    .Din_A    (bramImgOut_Din_A),
    .Dout_A   (bramImgOut_Dout_A),
    .Clk_B    (bramImgOut_Clk_B),
    .Rst_B    (bramImgOut_Rst_B),
    .EN_B     (bramImgOut_EN_B),
    .WEN_B    (bramImgOut_WEN_B),
    .Addr_B   (bramImgOut_Addr_B),
    .Din_B    (bramImgOut_Din_B),
    .Dout_B   (bramImgOut_Dout_B),
    .ready	(bramImgOut_ready),
    .done	    (bramImgOut_done)
);

// Assignment between dut and bramImgOut
assign bramImgOut_Clk_A = ImgOut_CLK_A;
assign bramImgOut_Rst_A = ImgOut_RST_A;
assign bramImgOut_Addr_A = ImgOut_ADDR_A;
assign bramImgOut_EN_A = ImgOut_EN_A;
assign ImgOut_DOUT_A = bramImgOut_Dout_A;
assign bramImgOut_WEN_A = ImgOut_WEN_A;
assign bramImgOut_Din_A = ImgOut_DIN_A;
assign bramImgOut_ready= ready;
assign bramImgOut_done = interface_done;


AESL_axi_slave_CRTL_BUS AESL_AXI_SLAVE_CRTL_BUS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_CRTL_BUS_AWADDR (CRTL_BUS_AWADDR),
    .TRAN_s_axi_CRTL_BUS_AWVALID (CRTL_BUS_AWVALID),
    .TRAN_s_axi_CRTL_BUS_AWREADY (CRTL_BUS_AWREADY),
    .TRAN_s_axi_CRTL_BUS_WVALID (CRTL_BUS_WVALID),
    .TRAN_s_axi_CRTL_BUS_WREADY (CRTL_BUS_WREADY),
    .TRAN_s_axi_CRTL_BUS_WDATA (CRTL_BUS_WDATA),
    .TRAN_s_axi_CRTL_BUS_WSTRB (CRTL_BUS_WSTRB),
    .TRAN_s_axi_CRTL_BUS_ARADDR (CRTL_BUS_ARADDR),
    .TRAN_s_axi_CRTL_BUS_ARVALID (CRTL_BUS_ARVALID),
    .TRAN_s_axi_CRTL_BUS_ARREADY (CRTL_BUS_ARREADY),
    .TRAN_s_axi_CRTL_BUS_RVALID (CRTL_BUS_RVALID),
    .TRAN_s_axi_CRTL_BUS_RREADY (CRTL_BUS_RREADY),
    .TRAN_s_axi_CRTL_BUS_RDATA (CRTL_BUS_RDATA),
    .TRAN_s_axi_CRTL_BUS_RRESP (CRTL_BUS_RRESP),
    .TRAN_s_axi_CRTL_BUS_BVALID (CRTL_BUS_BVALID),
    .TRAN_s_axi_CRTL_BUS_BREADY (CRTL_BUS_BREADY),
    .TRAN_s_axi_CRTL_BUS_BRESP (CRTL_BUS_BRESP),
    .TRAN_CRTL_BUS_read_data_finish(CRTL_BUS_read_data_finish),
    .TRAN_CRTL_BUS_ready_out (AESL_ready),
    .TRAN_CRTL_BUS_ready_in (AESL_slave_ready),
    .TRAN_CRTL_BUS_done_out (AESL_slave_output_done),
    .TRAN_CRTL_BUS_idle_out (AESL_idle),
    .TRAN_CRTL_BUS_write_start_in     (AESL_slave_write_start_in),
    .TRAN_CRTL_BUS_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_CRTL_BUS_transaction_done_in (AESL_done_delay),
    .TRAN_CRTL_BUS_interrupt  (interrupt),
    .TRAN_CRTL_BUS_start_in  (AESL_slave_start)
);


reg dump_tvout_finish_ap_return;

initial begin : dump_tvout_runtime_sign_ap_return
	integer fp;
	dump_tvout_finish_ap_return = 0;
	fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_ap_return = 1;
end

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

	event next_trigger_ready_cnt;
	
	initial begin : gen_ready_cnt
		ready_cnt = 0;
		wait (AESL_reset === 1);
		forever begin
			@ (posedge AESL_clock);
			if (ready == 1) begin
				if (ready_cnt < `AUTOTB_TRANSACTION_NUM) begin
					ready_cnt = ready_cnt + 1;
				end
			end
			-> next_trigger_ready_cnt;
		end
	end
	
	wire all_finish = (done_cnt == `AUTOTB_TRANSACTION_NUM);
	
	// done_cnt
	always @ (posedge AESL_clock) begin
		if (~AESL_reset) begin
			done_cnt <= 0;
		end else begin
			if (AESL_done == 1) begin
				if (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
					done_cnt <= done_cnt + 1;
				end
			end
		end
	end
	
	initial begin : finish_simulation
		integer fp1;
		integer fp2;
		wait (all_finish == 1);
		// last transaction is saved at negedge right after last done
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
		@ (posedge AESL_clock);
    fp1 = $fopen("./rtl.zs_func.autotvout_ap_return.dat", "r");
    fp2 = $fopen("./impl_rtl.zs_func.autotvout_ap_return.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.zs_func.autotvout_ap_return.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.zs_func.autotvout_ap_return.dat\"!");
    else begin
        $display("Comparing rtl.zs_func.autotvout_ap_return.dat with impl_rtl.zs_func.autotvout_ap_return.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
		$display("Simulation Passed.");
		$finish;
	end
	
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_ImgIn;
reg [31:0] size_ImgIn;
reg end_ImgOut;
reg [31:0] size_ImgOut;
reg end_ap_return;
reg [31:0] size_ap_return;

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
	integer rand;
	start = 0;
	ce = 1;
	wait (AESL_reset === 1);
	@ (posedge AESL_clock);
	start = 1;
	while (ready_cnt < `AUTOTB_TRANSACTION_NUM + 1) begin
		@ (posedge AESL_clock);
	end
	start = 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_ImgIn;

initial begin : dump_tvout_runtime_sign_ImgIn
	integer fp;
	dump_tvout_finish_ImgIn = 0;
	fp = $fopen(`AUTOTB_TVOUT_ImgIn_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ImgIn_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_ImgIn_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ImgIn_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_ImgIn = 1;
end


reg dump_tvout_finish_ImgOut;

initial begin : dump_tvout_runtime_sign_ImgOut
	integer fp;
	dump_tvout_finish_ImgOut = 0;
	fp = $fopen(`AUTOTB_TVOUT_ImgOut_out_wrapc, "w");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ImgOut_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[runtime]]]");
	$fclose(fp);
	wait (done_cnt == `AUTOTB_TRANSACTION_NUM);
	// last transaction is saved at negedge right after last done
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	@ (posedge AESL_clock);
	fp = $fopen(`AUTOTB_TVOUT_ImgOut_out_wrapc, "a");
	if (fp == 0) begin
		$display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ImgOut_out_wrapc);
		$display("ERROR: Simulation using HLS TB failed.");
		$finish;
	end
	$fdisplay(fp,"[[[/runtime]]]");
	$fclose(fp);
	dump_tvout_finish_ImgOut = 1;
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterOut_addr = 0;
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
	end else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
		AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
	end
end
always @ (posedge AESL_clock or negedge AESL_reset) begin
	if (~AESL_reset) begin
		AESL_mLatCnterIn_addr = 0;
	end else if (AESL_slave_write_start_finish && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
		AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
		AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
	end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];

	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);

	@(posedge AESL_reset);
	while (done_cnt < `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	for (i = 0; i < `AUTOTB_TRANSACTION_NUM; i = i + 1) begin
		latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
		lat_array[i] = latthistime;
		if (latthistime > latmax) latmax = latthistime;
		if (latthistime < latmin) latmin = latthistime;
		lattotal = lattotal + latthistime;
		if (`AUTOTB_TRANSACTION_NUM == 1) begin
			thrthistime = latthistime;
		end else begin
			thrthistime = AESL_mLatCnterIn[i + 1] - AESL_mLatCnterIn[i];
		end
		thr_array[i] = thrthistime;
		if (thrthistime > thrmax) thrmax = thrthistime;
		if (thrthistime < thrmin) thrmin = thrthistime;
		thrtotal = thrtotal + thrthistime;
	end

	lataver = lattotal / `AUTOTB_TRANSACTION_NUM;
	thraver = thrtotal / `AUTOTB_TRANSACTION_NUM;

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", thrmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", thrmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", thraver);
	end else begin
		// $::AESL_AUTOTB::g_axi_slave_port_list != ""
		$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
		$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", latmax);
		$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", latmin);
		$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", lataver);
	end

	$fclose(fp);

	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	if (`AUTOTB_TRANSACTION_NUM == 1) begin
		i = 0;
		thr_array[i] = 0;
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end else begin
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
		end
	end
	$fclose(fp);
end

endmodule
