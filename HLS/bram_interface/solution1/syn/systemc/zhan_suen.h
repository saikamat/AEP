// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _zhan_suen_HH_
#define _zhan_suen_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "zhan_suen_mul_32s_32s_32_6.h"
#include "zhan_suen_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct zhan_suen : public sc_module {
    // Port declarations 34
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > input_r_Addr_A;
    sc_out< sc_logic > input_r_EN_A;
    sc_out< sc_lv<4> > input_r_WEN_A;
    sc_out< sc_lv<32> > input_r_Din_A;
    sc_in< sc_lv<32> > input_r_Dout_A;
    sc_out< sc_logic > input_r_Clk_A;
    sc_out< sc_logic > input_r_Rst_A;
    sc_out< sc_lv<32> > result_Addr_A;
    sc_out< sc_logic > result_EN_A;
    sc_out< sc_lv<4> > result_WEN_A;
    sc_out< sc_lv<32> > result_Din_A;
    sc_in< sc_lv<32> > result_Dout_A;
    sc_out< sc_logic > result_Clk_A;
    sc_out< sc_logic > result_Rst_A;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_out< sc_logic > interrupt;


    // Module declarations
    zhan_suen(sc_module_name name);
    SC_HAS_PROCESS(zhan_suen);

    ~zhan_suen();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    zhan_suen_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* zhan_suen_CRTL_BUS_s_axi_U;
    zhan_suen_mul_32s_32s_32_6<1,6,32,32,32>* zhan_suen_mul_32s_32s_32_6_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_28;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > y;
    sc_signal< sc_logic > zhan_suen_CRTL_BUS_s_axi_U_ap_dummy_ce;
    sc_signal< sc_lv<32> > y_read_reg_100;
    sc_signal< sc_lv<7> > i_1_fu_85_p2;
    sc_signal< sc_lv<7> > i_1_reg_108;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_104;
    sc_signal< sc_lv<64> > tmp_fu_91_p1;
    sc_signal< sc_lv<64> > tmp_reg_113;
    sc_signal< sc_lv<1> > exitcond_fu_79_p2;
    sc_signal< sc_lv<32> > input_load_reg_123;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_120;
    sc_signal< sc_lv<32> > grp_fu_96_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_128;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_bdd_129;
    sc_signal< sc_lv<7> > i_reg_68;
    sc_signal< sc_logic > ap_sig_cseq_ST_st10_fsm_9;
    sc_signal< bool > ap_sig_bdd_139;
    sc_signal< sc_lv<32> > input_r_Addr_A_orig;
    sc_signal< sc_lv<32> > result_Addr_A_orig;
    sc_signal< sc_logic > grp_fu_96_ce;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_st1_fsm_0;
    static const sc_lv<10> ap_ST_st2_fsm_1;
    static const sc_lv<10> ap_ST_st3_fsm_2;
    static const sc_lv<10> ap_ST_st4_fsm_3;
    static const sc_lv<10> ap_ST_st5_fsm_4;
    static const sc_lv<10> ap_ST_st6_fsm_5;
    static const sc_lv<10> ap_ST_st7_fsm_6;
    static const sc_lv<10> ap_ST_st8_fsm_7;
    static const sc_lv<10> ap_ST_st9_fsm_8;
    static const sc_lv<10> ap_ST_st10_fsm_9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<7> ap_const_lv7_64;
    static const sc_lv<7> ap_const_lv7_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_104();
    void thread_ap_sig_bdd_120();
    void thread_ap_sig_bdd_129();
    void thread_ap_sig_bdd_139();
    void thread_ap_sig_bdd_28();
    void thread_ap_sig_cseq_ST_st10_fsm_9();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_exitcond_fu_79_p2();
    void thread_grp_fu_96_ce();
    void thread_i_1_fu_85_p2();
    void thread_input_r_Addr_A();
    void thread_input_r_Addr_A_orig();
    void thread_input_r_Clk_A();
    void thread_input_r_Din_A();
    void thread_input_r_EN_A();
    void thread_input_r_Rst_A();
    void thread_input_r_WEN_A();
    void thread_result_Addr_A();
    void thread_result_Addr_A_orig();
    void thread_result_Clk_A();
    void thread_result_Din_A();
    void thread_result_EN_A();
    void thread_result_Rst_A();
    void thread_result_WEN_A();
    void thread_tmp_fu_91_p1();
    void thread_zhan_suen_CRTL_BUS_s_axi_U_ap_dummy_ce();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
