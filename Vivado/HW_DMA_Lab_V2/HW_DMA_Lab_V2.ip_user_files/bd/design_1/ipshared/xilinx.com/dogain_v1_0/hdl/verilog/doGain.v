// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doGain,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=146,HLS_SYN_LUT=148}" *)

module doGain (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st8_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv7_64 = 7'b1100100;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg inStream_TREADY;
reg outStream_TVALID;
reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg    ap_ready;
wire   [31:0] gain;
wire    doGain_CRTL_BUS_s_axi_U_ap_dummy_ce;
reg   [6:0] i_reg_123;
reg  signed [31:0] gain_read_reg_180;
wire   [0:0] exitcond_fu_134_p2;
reg   [0:0] exitcond_reg_185;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_97;
reg    ap_sig_bdd_103;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_185_pp0_it4;
reg    ap_sig_ioackin_outStream_TREADY;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_185_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_185_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_185_pp0_it3;
wire   [6:0] i_1_fu_140_p2;
reg   [3:0] tmp_keep_V_reg_199;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it1;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it2;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it3;
reg   [3:0] ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it4;
reg   [3:0] tmp_strb_V_reg_204;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it1;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it2;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it3;
reg   [3:0] ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it4;
reg   [1:0] tmp_user_V_reg_209;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_209_pp0_it1;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_209_pp0_it2;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_209_pp0_it3;
reg   [1:0] ap_reg_ppstg_tmp_user_V_reg_209_pp0_it4;
reg   [0:0] tmp_last_V_reg_214;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_214_pp0_it1;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_214_pp0_it2;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_214_pp0_it3;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_214_pp0_it4;
reg   [4:0] tmp_id_V_reg_219;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_219_pp0_it1;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_219_pp0_it2;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_219_pp0_it3;
reg   [4:0] ap_reg_ppstg_tmp_id_V_reg_219_pp0_it4;
reg   [5:0] tmp_dest_V_reg_224;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it1;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it2;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it3;
reg   [5:0] ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it4;
wire   [31:0] grp_fu_174_p2;
reg    ap_reg_ioackin_outStream_TREADY = 1'b0;
reg    grp_fu_174_ce;
reg    ap_sig_cseq_ST_st8_fsm_2;
reg    ap_sig_bdd_297;
reg   [2:0] ap_NS_fsm;


doGain_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doGain_CRTL_BUS_s_axi_U(
    .AWVALID( s_axi_CRTL_BUS_AWVALID ),
    .AWREADY( s_axi_CRTL_BUS_AWREADY ),
    .AWADDR( s_axi_CRTL_BUS_AWADDR ),
    .WVALID( s_axi_CRTL_BUS_WVALID ),
    .WREADY( s_axi_CRTL_BUS_WREADY ),
    .WDATA( s_axi_CRTL_BUS_WDATA ),
    .WSTRB( s_axi_CRTL_BUS_WSTRB ),
    .ARVALID( s_axi_CRTL_BUS_ARVALID ),
    .ARREADY( s_axi_CRTL_BUS_ARREADY ),
    .ARADDR( s_axi_CRTL_BUS_ARADDR ),
    .RVALID( s_axi_CRTL_BUS_RVALID ),
    .RREADY( s_axi_CRTL_BUS_RREADY ),
    .RDATA( s_axi_CRTL_BUS_RDATA ),
    .RRESP( s_axi_CRTL_BUS_RRESP ),
    .BVALID( s_axi_CRTL_BUS_BVALID ),
    .BREADY( s_axi_CRTL_BUS_BREADY ),
    .BRESP( s_axi_CRTL_BUS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( doGain_CRTL_BUS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .gain( gain )
);

doGain_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doGain_mul_32s_32s_32_6_U1(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .din0( inStream_TDATA ),
    .din1( gain_read_reg_180 ),
    .ce( grp_fu_174_ce ),
    .dout( grp_fu_174_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ioackin_outStream_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ioackin_outStream_TREADY <= ap_const_logic_0;
        end else if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_1 == outStream_TREADY))) begin
            ap_reg_ioackin_outStream_TREADY <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_134_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_134_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_134_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
            ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
            ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        if (~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
            ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_134_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        i_reg_123 <= i_1_fu_140_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_123 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        ap_reg_ppstg_exitcond_reg_185_pp0_it1 <= exitcond_reg_185;
        ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it1 <= tmp_dest_V_reg_224;
        ap_reg_ppstg_tmp_id_V_reg_219_pp0_it1 <= tmp_id_V_reg_219;
        ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it1 <= tmp_keep_V_reg_199;
        ap_reg_ppstg_tmp_last_V_reg_214_pp0_it1 <= tmp_last_V_reg_214;
        ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it1 <= tmp_strb_V_reg_204;
        ap_reg_ppstg_tmp_user_V_reg_209_pp0_it1 <= tmp_user_V_reg_209;
        exitcond_reg_185 <= exitcond_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5)))) begin
        ap_reg_ppstg_exitcond_reg_185_pp0_it2 <= ap_reg_ppstg_exitcond_reg_185_pp0_it1;
        ap_reg_ppstg_exitcond_reg_185_pp0_it3 <= ap_reg_ppstg_exitcond_reg_185_pp0_it2;
        ap_reg_ppstg_exitcond_reg_185_pp0_it4 <= ap_reg_ppstg_exitcond_reg_185_pp0_it3;
        ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it2 <= ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it1;
        ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it3 <= ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it2;
        ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it4 <= ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it3;
        ap_reg_ppstg_tmp_id_V_reg_219_pp0_it2 <= ap_reg_ppstg_tmp_id_V_reg_219_pp0_it1;
        ap_reg_ppstg_tmp_id_V_reg_219_pp0_it3 <= ap_reg_ppstg_tmp_id_V_reg_219_pp0_it2;
        ap_reg_ppstg_tmp_id_V_reg_219_pp0_it4 <= ap_reg_ppstg_tmp_id_V_reg_219_pp0_it3;
        ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it2 <= ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it1;
        ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it3 <= ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it2;
        ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it4 <= ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it3;
        ap_reg_ppstg_tmp_last_V_reg_214_pp0_it2 <= ap_reg_ppstg_tmp_last_V_reg_214_pp0_it1;
        ap_reg_ppstg_tmp_last_V_reg_214_pp0_it3 <= ap_reg_ppstg_tmp_last_V_reg_214_pp0_it2;
        ap_reg_ppstg_tmp_last_V_reg_214_pp0_it4 <= ap_reg_ppstg_tmp_last_V_reg_214_pp0_it3;
        ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it2 <= ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it1;
        ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it3 <= ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it2;
        ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it4 <= ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it3;
        ap_reg_ppstg_tmp_user_V_reg_209_pp0_it2 <= ap_reg_ppstg_tmp_user_V_reg_209_pp0_it1;
        ap_reg_ppstg_tmp_user_V_reg_209_pp0_it3 <= ap_reg_ppstg_tmp_user_V_reg_209_pp0_it2;
        ap_reg_ppstg_tmp_user_V_reg_209_pp0_it4 <= ap_reg_ppstg_tmp_user_V_reg_209_pp0_it3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        gain_read_reg_180 <= gain;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_134_p2 == ap_const_lv1_0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        tmp_dest_V_reg_224 <= inStream_TDEST;
        tmp_id_V_reg_219 <= inStream_TID;
        tmp_keep_V_reg_199 <= inStream_TKEEP;
        tmp_last_V_reg_214 <= inStream_TLAST;
        tmp_strb_V_reg_204 <= inStream_TSTRB;
        tmp_user_V_reg_209 <= inStream_TUSER;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_2)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_97) begin
    if (ap_sig_bdd_97) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_297) begin
    if (ap_sig_bdd_297) begin
        ap_sig_cseq_ST_st8_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_2 = ap_const_logic_0;
    end
end

always @ (outStream_TREADY or ap_reg_ioackin_outStream_TREADY) begin
    if ((ap_const_logic_0 == ap_reg_ioackin_outStream_TREADY)) begin
        ap_sig_ioackin_outStream_TREADY = outStream_TREADY;
    end else begin
        ap_sig_ioackin_outStream_TREADY = ap_const_logic_1;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_103 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_exitcond_reg_185_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        grp_fu_174_ce = ap_const_logic_1;
    end else begin
        grp_fu_174_ce = ap_const_logic_0;
    end
end

always @ (exitcond_fu_134_p2 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_103 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_exitcond_reg_185_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond_fu_134_p2 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))))) begin
        inStream_TREADY = ap_const_logic_1;
    end else begin
        inStream_TREADY = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_103 or ap_reg_ppiten_pp0_it0 or ap_reg_ppstg_exitcond_reg_185_pp0_it4 or ap_reg_ppiten_pp0_it5 or ap_reg_ioackin_outStream_TREADY) begin
    if (((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~(ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) & (ap_const_logic_0 == ap_reg_ioackin_outStream_TREADY))) begin
        outStream_TVALID = ap_const_logic_1;
    end else begin
        outStream_TVALID = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_134_p2 or ap_sig_bdd_103 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it4 or ap_reg_ppstg_exitcond_reg_185_pp0_it4 or ap_sig_ioackin_outStream_TREADY or ap_reg_ppiten_pp0_it5) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_134_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_sig_bdd_103 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_lv1_0 == ap_reg_ppstg_exitcond_reg_185_pp0_it4) & (ap_const_logic_0 == ap_sig_ioackin_outStream_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it5))) & ~(exitcond_fu_134_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st8_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end


always @ (inStream_TVALID or exitcond_fu_134_p2) begin
    ap_sig_bdd_103 = ((inStream_TVALID == ap_const_logic_0) & (exitcond_fu_134_p2 == ap_const_lv1_0));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_297 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_97 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign doGain_CRTL_BUS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign exitcond_fu_134_p2 = (i_reg_123 == ap_const_lv7_64? 1'b1: 1'b0);

assign i_1_fu_140_p2 = (i_reg_123 + ap_const_lv7_1);

assign outStream_TDATA = grp_fu_174_p2;

assign outStream_TDEST = ap_reg_ppstg_tmp_dest_V_reg_224_pp0_it4;

assign outStream_TID = ap_reg_ppstg_tmp_id_V_reg_219_pp0_it4;

assign outStream_TKEEP = ap_reg_ppstg_tmp_keep_V_reg_199_pp0_it4;

assign outStream_TLAST = ap_reg_ppstg_tmp_last_V_reg_214_pp0_it4;

assign outStream_TSTRB = ap_reg_ppstg_tmp_strb_V_reg_204_pp0_it4;

assign outStream_TUSER = ap_reg_ppstg_tmp_user_V_reg_209_pp0_it4;


endmodule //doGain

